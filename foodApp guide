
Css:
    - no se aplica el efecto cascada de css a los elementos en react native. los componentes hijos no heredan las propiedades de los elementos padres.
    opciones para mejorarlo:
        - crear una hoja de estilos en donde se apliquen los estilos
        - crear componentes custom que tengan las propiedades aplicadas


hacer listas:
    - la aplicacion puede ser optimizada para descargar solo lo que es visible en la pantalla en ese momento. en vez de descargar 100 items, descarga solo los 5 que se ven.
    - para esto se utilizan los componentes nativos:
        - Flatlist
        - SectionList

area tocable en el screen:
    - para agrandar el area que se puede tocar, se puede usar una propiedad llamada
    : hitSlop
    hitSlop agranda el area accesible

HEADER:
    - cada screen tiene que tener un header, en donde estan los botones para volver a la pantalla anterior, u otras opciones (nombre del restaurante)
    - conviene importar import {getStatusBarHeight} from 'react-native-status-bar-height', que permite que el height del header se ajuste por telefono. para ios es necesario bajar otra funcion:
        - const barHeight = getStatusBarHeight();

    - los botones estan compuestos por:
        <View
            <TouchableOpacity
                <Image
                    <Icon
                    <Text
                    - pueden contener el boton de volver a la pantalla anterior:
                        - onPress => navigation.goBack()

    - todos estos componentes pueden recibir style

TABS:
    - las tabs permiten navegar entre screens, generalmente se ubican en la parte inferior de la app
    - para crear una tab es necesario importar:
    - import {  createBottomTabNavigator } from '@react-navigation/bottom-tabs'
    - const Tab = createBottomTabNavigator();
    - se setea de la misma manera que la navegacion entre screens:
        <Tab.Navigator
            //se pueden setear opciones, styles
            <Tab.Screen
                // screen a donde lleva cuando el tab es tocado
                component={home} 
                options={{
                    // focused permite que cambie de color
                    tabBarIcon: ({focused}) => (
                        <Image
                        source={icons.cutlery}
                        resizeMode="contain"
                        style={
                            //permite cambiar el color de manera condicional dependiendo del focus
                             tintColor: focused ? COLORS.primary : COLORS.secondary,
                        }
                    name="screen"

    

Estructura basica de una screen:
    - todas las screens deben tener header, y pueden tener o no tabs
    - las screens deberian recibir siempre? las props:
        - navigation: permite navegar entre screens
        - route: permite pasar data entre las screens:
            const {data} = route.params //desestructura la data de route.params

    - las screens estan compuestas por los componentes:
        - View:
            - container general de cada screen, parecido al div
        - TouchableOpacity:
            - elemento que reduce su opacidad cuando es apretado
            - se usa mayormente como boton 
        - Text:
            - componente que se usa para el texto
        - Image:
            - comp que se usa para imagenes, iconos
        - Flatlist:
            - cheaquear todas las props de Flatlist y SectionList
            - se utiliza para renderear listas
            -  <FlatList
                    data={restaurants}
                    keyExtractor={item => `${item.id}`}
                    renderItem={renderItem}
                    contentContainerStyle={{
                    paddingHorizontal: SIZES.padding * 2,
                    paddingBottom: 30,
                }}
            - data recibe como parametro el array a ser rendereado
            - keyExtractor recibe el id que va a tener cada item de la lista
            - renderItem recibe como paramtro el elemento a ser rendereado:
                - conviene separarlo en un elemento custom. limpia el codigo
    - adentro de la View general se renderean funciones? en vez de componentes


Navegacion entre paginas/screens:
    - la app debe estar contenida dentro de:
        <NavigatorContainer
            <Stack.Navigator
                <Stack.Screen component={screen} name={"screen}

    - para navegar entre screen, pasar como prop "navigation" a los componentes screens:
        -  onPress = () =>
            navigation.navigate('Restaurant', {
                //  para pasar props entre screens
              item,   //se pasa un objeto como seguendo parametro, en donde se guardan las props
              currentLocation,
            }

Carrousel de fotos:
    - importar Animated de 'react-native'
    - <Animated.ScrollView
        horizontal
        pagingEnabled
        scrollEventThrottle={16}
        snapToAlignment="center"
        showsHorizontalScrollIndicator={false}>
        {restaurant?.menu.map((item, index) => (
            generar el item a ser rendereado:
                - puede contener imagenes, textos, botones


firestore data:
    - coleccion de restaurantes:
        - cada restaurante es un objeto que contiene:
            - imagen
            - array de platos:
                - cada plato es un objeto que contiene:
                    - 2 fotos
                    - nombre
                    - descripcion
                    - peso
                    - kcal
                    - precio 
                    - estrellas?

        - coleccion de usuarios:
            - AuthO login
            - se deben de poder guardar las comidas favoritas 

estructura de la app:
    - folder navigation:
        archivo tabs.js 
    - folder screens:
        - contiene un archivo screen.js por cada screen
    - folder components 